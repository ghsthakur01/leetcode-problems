#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>

#define MAX 100  

// Global stacks and top pointers
int operandStack[MAX], operatorStack[MAX];
int operandTop = -1, operatorTop = -1;

// Function prototypes
void pushOperand(int value);
int popOperand();
void pushOperator(char op);
char popOperator();
char peekOperator();
int precedence(char op);
int applyOperation(int a, int b, char op);
int evaluateInfix(const char* expression);

int main() {
    char expression[MAX];
    
    printf("Enter infix expression: ");
    scanf("%s", expression);
    
    int result = evaluateInfix(expression);
    printf("Result: %d\n", result);
    
    return 0;
}

// Function to push an operand onto the stack
void pushOperand(int value) {
    if (operandTop == MAX - 1) {
        printf("Operand stack overflow\n");
        exit(1);
    }
    operandStack[++operandTop] = value;
}

// Function to pop an operand from the stack
int popOperand() {
    if (operandTop == -1) {
        printf("Operand stack underflow\n");
        exit(1);
    }
    return operandStack[operandTop--];
}

// Function to push an operator onto the stack
void pushOperator(char op) {
    if (operatorTop == MAX - 1) {
        printf("Operator stack overflow\n");
        exit(1);
    }
    operatorStack[++operatorTop] = op;
}

// Function to pop an operator from the stack
char popOperator() {
    if (operatorTop == -1) {
        printf("Operator stack underflow\n");
        exit(1);
    }
    return operatorStack[operatorTop--];
}

// Function to get the top operator without popping
char peekOperator() {
    if (operatorTop == -1) return -1;
    return operatorStack[operatorTop];
}

// Function to return precedence of operators
int precedence(char op) {
    if (op == '+' || op == '-') return 1;
    if (op == '*' || op == '/') return 2;
    return 0;
}
// Function to apply an operator and return the result
int applyOperation(int a, int b, char op) {
    switch (op) {
        case '+': return a + b;
        case '-': return a - b;
        case '*': return a * b;
        case '/': return b? ( a / b): 0;
        default: return 0;
    }

}
// Function to evaluate infix expression
int evaluateInfix(const char* expression) {
    operandTop = operatorTop = -1;
    int i;
    for (i = 0; expression[i] !='\0'; i++) {
        char ch = expression[i];
        //If the character is a number, push it onto the operand stack
        if(isdigit(ch)){
            pushOperand(ch - '0');
        }
        //If the characteris an opening parenthesis, push it onto the operator stack
        else if(ch == '('){
            pushOperator(ch);
        }
        //If the character is a closing parenthesis, pop operators from the operator stack and apply them to operands from the operand stack until an opening parenthesis is encountered
        else if(ch == ')'){
            
            while(peekOperator() != '('){
                int b = popOperand();
                int a = popOperand();
                char op = popOperator();
                pushOperand(applyOperation(a,b,op));
            }
            popOperator();//Remove the opening parenthesis from the operator stack
        }
    
    //If it's an operator
    else{
        //While the operator stack is not empty and the precedence of the current operator is less than or equal to the precedence of the operator at the top of the stack, pop the operator from the stack and apply it to the operands
        while(operatorTop != -1 && precedence(ch) <= precedence(peekOperator())){
            int b = popOperand();
            int a = popOperand();
            char op = popOperator();
            pushOperand(applyOperation(a,b,op));
        }
        pushOperator(ch);
    }
    }
    //process the remaining operators in the stack
    while(operatorTop != -1){
        int b = popOperand();
        int a = popOperand();
        char op = popOperator();
        pushOperand(applyOperation(a,b,op));
    }

return popOperand();
}
