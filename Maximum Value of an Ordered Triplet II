#include <stdio.h>

long long maximumTripletValue(int* nums, int numsSize) {
    if (numsSize < 3) return 0;  // Edge case

    // Step 1: Create prefix max and suffix max arrays
    long long maxValue = 0;
    int prefixMax[numsSize];  // Stores max(nums[0] to nums[j-1])
    int suffixMax[numsSize];  // Stores max(nums[j+1] to nums[n-1])

    // Step 2: Compute prefix max array
    prefixMax[0] = nums[0];
    for (int i = 1; i < numsSize; i++) {
        prefixMax[i] = (nums[i] > prefixMax[i - 1]) ? nums[i] : prefixMax[i - 1];
    }

    // Step 3: Compute suffix max array
    suffixMax[numsSize - 1] = nums[numsSize - 1];
    for (int i = numsSize - 2; i >= 0; i--) {
        suffixMax[i] = (nums[i] > suffixMax[i + 1]) ? nums[i] : suffixMax[i + 1];
    }

    // Step 4: Iterate through nums[j] (middle element) and calculate max value
    for (int j = 1; j < numsSize - 1; j++) {
        long long tripletValue = (long long)(prefixMax[j - 1] - nums[j]) * suffixMax[j + 1];
        if (tripletValue > maxValue) {
            maxValue = tripletValue;
        }
    }

    return maxValue;
}
